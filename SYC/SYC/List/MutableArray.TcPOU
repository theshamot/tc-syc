<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="MutableArray" Id="{0896bf5a-c1f5-4c12-a811-5a62ae580db1}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK MutableArray IMPLEMENTS List
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	arr					: POINTER TO BYTE;
	_length				: ListLength;
	_datatype			: ListType;
	capacity			: ListLength;
	datatypeDefined		: BOOL;
END_VAR
VAR CONSTANT
	GROWTH_FACTOR		: UDINT := 2;
	INITIAL_CAPACITY	: UDINT := 2;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Alloc" Id="{e9fde826-391f-4f7d-959a-153b55e3a286}">
      <Declaration><![CDATA[
METHOD PRIVATE Alloc : BOOL
VAR_INPUT
END_VAR
VAR
	allocSize	: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
capacity := INITIAL_CAPACITY;
allocSize := _datatype.size * capacity;
arr := __NEW(BYTE, allocSize);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Append" Id="{86aa2220-f387-453b-97bc-ba6da17bc618}">
      <Declaration><![CDATA[
METHOD Append : List
VAR_INPUT
	data	: ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
Append := THIS^;

IF (NOT datatypeDefined) THEN
	
	_datatype.size := TO_UDINT(data.diSize);
	_datatype.typeClass := data.TypeClass;
	
	datatypeDefined := TRUE;
	
	Alloc();
	
	MEMCPY(destAddr := arr + _length * _datatype.size, srcAddr := data.pValue, n := _datatype.size);

	_length := _length + 1;
ELSIF (IsTypeCorrect(data)) THEN
	
	IF (_length = capacity) THEN
		Grow();
	END_IF
	
	MEMCPY(destAddr := arr + _length * _datatype.size, srcAddr := data.pValue, n := _datatype.size);
	
	_length := _length + 1;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Datatype" Id="{be2143a0-bdb5-47e8-bbf8-6e876a9e2c1f}">
      <Declaration><![CDATA[
PROPERTY Datatype : ListType
]]></Declaration>
      <Get Name="Get" Id="{f133ff08-a508-4135-bbc8-d278d812bdae}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_exit" Id="{f4735228-f18e-4f17-8f04-439136b68248}">
      <Declaration><![CDATA[
// Delete pointers
METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
__DELETE(arr);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get" Id="{91069005-b335-4192-9298-7f26f935a7d7}">
      <Declaration><![CDATA[
METHOD Get : BOOL
VAR_INPUT
	index		: INT; // Allow for indexing from end
	destination	: ANY;
END_VAR
VAR
	arrIndex	: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF (_length = 0 OR NOT IsTypeCorrect(destination)) THEN
	RETURN;
END_IF

arrIndex := GetArrayIndex(index);

IF (IsArrayIndexValid(arrIndex)) THEN

	MEMCPY(destAddr := destination.pValue, srcAddr := arr + arrIndex * _datatype.size, n := _datatype.size);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetArrayIndex" Id="{10f68731-fc5f-4b7b-809d-3644ff8e93f8}">
      <Declaration><![CDATA[
METHOD PRIVATE GetArrayIndex : UDINT
VAR_INPUT
	index		: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF (index >= 0) THEN
	GetArrayIndex := TO_UDINT(index);
ELSE
	GetArrayIndex := _length + TO_UDINT(index);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Grow" Id="{fe355488-e8cb-4e5e-8cc5-a078937f6bab}">
      <Declaration><![CDATA[
METHOD PRIVATE Grow : BOOL
VAR_INPUT
END_VAR
VAR
	sizeToCopy		: UDINT;
	allocSize		: UDINT;
	newArr			: PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
capacity := capacity * GROWTH_FACTOR;
allocSize := _datatype.size * capacity;
newArr := __NEW(BYTE, allocSize);

sizeToCopy := _datatype.size * _length; 
MEMCPY(destAddr := newArr, srcAddr := arr, n := sizeToCopy);

__DELETE(arr);
arr := newArr;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Insert" Id="{3163860b-3538-4103-8d7c-cde0e326ad61}">
      <Declaration><![CDATA[
METHOD Insert : List
VAR_INPUT
	index	: INT; // Allow for indexing from end
	data	: ANY;
END_VAR
VAR
	arrIndex	: UDINT;
	moveLength	: UDINT;
	indexAdr	: PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
Insert := THIS^;

arrIndex := GetArrayIndex(index);

IF (NOT datatypeDefined AND arrIndex = 0) THEN
	
	_datatype.size := TO_UDINT(data.diSize);
	_datatype.typeClass := data.TypeClass;
	
	datatypeDefined := TRUE;
	
	Alloc();
	
	MEMCPY(destAddr := arr + _length * _datatype.size, srcAddr := data.pValue, n := _datatype.size);

	_length := _length + 1;
ELSIF (IsTypeCorrect(data)) THEN
	IF (IsArrayIndexValid(arrIndex) OR _length = 0 OR arrIndex = _length) THEN

		IF (_length = capacity) THEN
			Grow();
		END_IF
		
		moveLength := _length - arrIndex;
		indexAdr := arr + arrIndex * _datatype.size;
		IF (moveLength > 0) THEN
			MEMMOVE(destAddr := indexAdr + _datatype.size, srcAddr := indexAdr, n := moveLength * _datatype.size);
		END_IF
		
		MEMCPY(destAddr := indexAdr, srcAddr := data.pValue, n := _datatype.size);
		
		_length := _length + 1;
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsArrayIndexValid" Id="{c6a78dd1-a9ee-4fc6-949a-5e338a333330}">
      <Declaration><![CDATA[
METHOD PRIVATE IsArrayIndexValid : BOOL
VAR_INPUT
	arrIndex	: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IsArrayIndexValid := arrIndex >= 0 AND arrIndex < _length;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsEmpty" Id="{51c08a3c-95e0-4056-a230-7c9048556011}">
      <Declaration><![CDATA[
METHOD IsEmpty : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IsEmpty := _length = 0;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsTypeCorrect" Id="{613606d2-eba7-4934-a39f-c49cdc6a1c35}">
      <Declaration><![CDATA[
METHOD IsTypeCorrect : BOOL
VAR_INPUT
	checkedVariable		: ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IsTypeCorrect :=
	checkedVariable.diSize = _datatype.size AND
	checkedVariable.TypeClass = _datatype.typeClass; 
]]></ST>
      </Implementation>
    </Method>
    <Property Name="LastIndex" Id="{bfdc84f1-3bf5-4423-99cc-1c7c8c761173}">
      <Declaration><![CDATA[
PROPERTY LastIndex : ListLength
]]></Declaration>
      <Get Name="Get" Id="{9b3456c7-3462-40dd-a7d3-6055c68bea90}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
IF (_length = 0) THEN
	LastIndex := 0;
ELSE
	LastIndex := _length - 1;
END_IF
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Length" Id="{6c91b064-294a-425d-93a3-c4864d879a95}">
      <Declaration><![CDATA[
PROPERTY Length : ListLength
]]></Declaration>
      <Get Name="Get" Id="{e4ce2b85-2010-4b19-afa9-1f94fd935e76}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Prepend" Id="{6c7dd413-0931-4486-b546-958b79c32840}">
      <Declaration><![CDATA[
METHOD Prepend : List
VAR_INPUT
	data	: ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
Prepend := THIS^;

IF (NOT datatypeDefined) THEN
	
	_datatype.size := TO_UDINT(data.diSize);
	_datatype.typeClass := data.TypeClass;
	
	datatypeDefined := TRUE;
	
	Alloc();
	
	MEMCPY(destAddr := arr + _length * _datatype.size, srcAddr := data.pValue, n := _datatype.size);

	_length := _length + 1;
ELSIF (IsTypeCorrect(data)) THEN
	
	IF (_length = capacity) THEN
		Grow();
	END_IF
	
	MEMMOVE(destAddr := arr + _datatype.size, srcAddr := arr, n := _length * _datatype.size);
	MEMCPY(destAddr := arr, srcAddr := data.pValue, n := _datatype.size);
	
	_length := _length + 1;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{16520934-f476-4100-947a-a822d99cb105}">
      <Declaration><![CDATA[
METHOD Remove : List
VAR_INPUT
	index		: INT; // Allow for indexing from end
END_VAR
VAR
	arrIndex	: UDINT;
	moveLength	: UDINT;
	indexAdr	: PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
Remove := THIS^;

IF (_length = 0) THEN
	RETURN;
END_IF

arrIndex := GetArrayIndex(index);

IF (IsArrayIndexValid(arrIndex)) THEN

	moveLength := LastIndex - arrIndex;
	indexAdr := arr + arrIndex * _datatype.size;
	IF (moveLength = 0) THEN
		MEMSET(destAddr := indexAdr, fillByte := 16#00, n := _datatype.size);
	ELSE
		MEMMOVE(destAddr := indexAdr, srcAddr := indexAdr + _datatype.size, n := moveLength * _datatype.size);
		MEMSET(destAddr := indexAdr + moveLength * _datatype.size, fillByte := 16#00, n := _datatype.size);
	END_IF

	_length := _length - 1;
	
	IF (_length > 1 AND_THEN _length <= capacity / (GROWTH_FACTOR * 2)) THEN
		Shrink();
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAll" Id="{c9620d31-acbe-4008-ade5-18acfcc46650}">
      <Declaration><![CDATA[
METHOD RemoveAll : List
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
RemoveAll := THIS^;

__DELETE(arr);
_length := 0;

Alloc();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Shrink" Id="{aec0ac86-82fe-4b60-8072-6413c84fdf18}">
      <Declaration><![CDATA[
METHOD PRIVATE Shrink : BOOL
VAR_INPUT
END_VAR
VAR
	sizeToCopy		: UDINT;
	allocSize		: UDINT;
	newArr			: PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
capacity := capacity / GROWTH_FACTOR;
allocSize := _datatype.size * capacity;
newArr := __NEW(BYTE, allocSize);

sizeToCopy := _datatype.size * _length; 
MEMCPY(destAddr := newArr, srcAddr := arr, n := sizeToCopy);

__DELETE(arr);
arr := newArr;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>