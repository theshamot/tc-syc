<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="Regex" Id="{ba78c8a3-e077-4246-843a-23e1c2df3f46}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Regex
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	start : UINT;
	length : UINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//https://stackoverflow.com/questions/4040835/how-do-i-write-a-simple-regular-expression-pattern-matching-function-in-c-or-c]]></ST>
    </Implementation>
    <Method Name="incMatchPos" Id="{26ab737c-e413-40af-9a4d-23dc430b87fa}">
      <Declaration><![CDATA[METHOD incMatchPos : BOOL
VAR_INPUT
	isMatch : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF isMatch THEN
	length := length + 1;
ELSE
	start := start + 1;
	length := 0;
END_IF
incMatchPos := isMatch;]]></ST>
      </Implementation>
    </Method>
    <Method Name="match" Id="{9b9816b4-16ed-4e1a-8995-a98c7b11e48b}">
      <Declaration><![CDATA[METHOD match : BOOL
VAR_INPUT
	pattern : STRING;
	text	: STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[start := 1;
length := 0;
match := matchP(ADR(pattern), ADR(text));]]></ST>
      </Implementation>
    </Method>
    <Method Name="matchHere" Id="{0dd7116e-2356-48e6-b697-620cfeda3484}">
      <Declaration><![CDATA[METHOD PRIVATE matchHere : BOOL
VAR_INPUT
	pattern : POINTER TO STRING;
	text	: POINTER TO STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF P2CHAR(pattern) = '$00' THEN
	matchHere := TRUE;
	RETURN;
ELSIF P2CHAR(pattern + 1) = '*' THEN
	matchHere := matchStar(P2CHAR(pattern), pattern + 2, text);
	RETURN;
ELSIF P2CHAR(pattern) = '$$' AND P2CHAR(pattern + 1) = '$00' THEN
	matchHere := P2CHAR(text) = '$00';
	RETURN;
ELSIF text^ <> '$00' AND (P2CHAR(pattern) = '.' OR P2CHAR(pattern) = P2CHAR(text)) THEN
	matchHere := THIS^.matchHere(pattern + 1, text + 1);
	incMatchPos(matchHere);
	RETURN;
END_IF



///* matchhere: search FOR regexp AT beginning OF text */
//int matchhere(char *regexp, char *text)
//{
//    if (regexp[0] == '\0')
//        return 1;
//    if (regexp[1] == '*')
//        return matchstar(regexp[0], regexp+2, text);
//    if (regexp[0] == '$' && regexp[1] == '\0')
//        return *text == '\0';
//    if (*text!='\0' && (regexp[0]=='.' || regexp[0]==*text))
//        return matchhere(regexp+1, text+1);
//    return 0;
//}]]></ST>
      </Implementation>
    </Method>
    <Method Name="matchP" Id="{7d8bbf88-5a67-4dba-9c81-2b044a0d7ce6}">
      <Declaration><![CDATA[METHOD matchP : BOOL
VAR_INPUT
	pattern : POINTER TO STRING;
	text	: POINTER TO STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF P2CHAR(pattern) = '^' THEN
	matchP := matchHere(pattern + 1, text);
	RETURN;
END_IF
REPEAT
	IF matchHere(pattern, text) THEN
		matchP := TRUE;
		RETURN;
	END_IF
UNTIL
	NOT(P2CHAR(text) <> '$00') AND (text := text + 1) <> NULL AND (incMatchPos(matchP) OR TRUE) //pointer dereference and increment oneliner
END_REPEAT



///* match: search FOR regexp anywhere in text */
//int match(char *regexp, char *text)
//{
//    if (regexp[0] == '^')
//        return matchhere(regexp+1, text);
//    do {    /* must look even if string is empty */
//        if (matchhere(regexp, text))
//            return 1;
//    } while (*text++ != '\0');
//    return 0;
//}]]></ST>
      </Implementation>
    </Method>
    <Method Name="matchStar" Id="{81715e5e-d1f2-4762-89a4-cdbc3f72ded6}">
      <Declaration><![CDATA[METHOD PRIVATE matchStar : BOOL
VAR_INPUT
	c		: CHAR;
	pattern : POINTER TO STRING;
	text	: POINTER TO STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[REPEAT
	IF matchHere(pattern, text) THEN
		matchStar := TRUE;
		RETURN;
	END_IF
UNTIL
	NOT(P2CHAR(text) <> '$00' AND (P2CHAR(text) = c OR c = '.')) AND (text := text + 1) > null AND (incMatchPos(NOT matchStar) OR TRUE)
END_REPEAT


///* matchstar: search FOR c*regexp AT beginning OF text */
//int matchstar(int c, char *regexp, char *text)
//{
//    do {    /* a * matches zero or more instances */
//        if (matchhere(regexp, text))
//            return 1;
//    } while (*text != '\0' && (*text++ == c || c == '.'));
//    return 0;
//}]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>